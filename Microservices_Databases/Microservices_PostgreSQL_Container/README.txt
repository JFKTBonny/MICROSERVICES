This setup demonstrates a clean and well-structured Dockerized microservices architecture using PostgreSQL and RestTemplate for full CRUD operations.

Key takeaways:
#############

    End-to-end flow:  Browser → ProductWeb → ProductServer → PostgreSQLDB matches a standard layered microservice design, isolating frontend, backend, and database concerns...
    ---------------
    Minikube integration:  Running the build and containers inside Minikube ensures Kubernetes-like orchestration locally, allowing seamless testing of microservice interactions...
    --------------------
    Persistence:   PostgreSQL runs in a Docker container with a dedicated volume, ensuring database data is retained across container restarts...
    -----------     
    Build automation:   package-build-deploy.sh packages microservices, builds images, and runs containers in one step, streamlining deployment...
    ----------------
    Logging & verification:     Server and web logs confirm proper startup, initialization, and CRUD operations; direct psql access validates database state...
    ----------------------
    Environment cleanup:     cleanup.sh removes containers, networks, and images efficiently, keeping the environment consistent and reproducible...
    -------------------



✅ Overall, this demonstrates a fully functional microservice setup with persistence, proper networking, 
automated build/deploy, and testability—ideal for local development or learning containerized microservice workflows...